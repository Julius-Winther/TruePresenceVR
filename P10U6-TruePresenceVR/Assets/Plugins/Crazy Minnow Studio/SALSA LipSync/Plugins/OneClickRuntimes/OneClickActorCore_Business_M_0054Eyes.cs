using UnityEngine;namespace CrazyMinnow.SALSA.OneClicks{	/// <summary>	/// RELEASE NOTES:	///		Script generated by CreateCustomOneClick: v2.7.3.	///		See CreateCustomOneClick for version details.	/// ==========================================================================	/// PURPOSE: This script applies OneClick settings to a custom model system	///		for the Eyes module. This script was generated by CreateCustomOneClick	///		from a custom model and is not supported by Crazy Minnow Studio, LLC.	///		unless made available via the Official downloads portal.	/// ==========================================================================	/// DISCLAIMER: While every attempt has been made to ensure the safe content	///		and operation of these files, they are provided as-is, without	///		warranty or guarantee of any kind. By downloading and using these	///		files you are accepting any and all risks associated and release	///		Crazy Minnow Studio, LLC of any and all liability.	/// ==========================================================================	/// </summary>	public class OneClickActorCore_Business_M_0054Eyes : MonoBehaviour	{		public static void Setup(GameObject go)		{			string head = "CC_Base_Head";			string[] blinkSmr = new string[] {"Character"};			string[] eyeL = new string[] {"CC_Base_L_Eye"};			string[] eyeR = new string[] {"CC_Base_R_Eye"};			string[] blinkL = new string[] {"Eye_Blink_L"};			string[] blinkR = new string[] {"Eye_Blink_R"};			if (go)			{				Eyes eyes = go.GetComponent<Eyes>();				if (eyes == null)				{					eyes = go.AddComponent<Eyes>();				}				else				{					DestroyImmediate(eyes);					eyes = go.AddComponent<Eyes>();				}				// System Properties                eyes.characterRoot = go.transform;                // Heads - Bone_Rotation                eyes.BuildHeadTemplate(Eyes.HeadTemplates.Bone_Rotation_XY);                eyes.heads[0].expData.name = "head";                eyes.heads[0].expData.components[0].name = "head";                eyes.heads[0].expData.controllerVars[0].bone = Eyes.FindTransform(eyes.characterRoot, head);                eyes.headTargetOffset.y = 0.065f;                eyes.CaptureMin(ref eyes.heads);                eyes.CaptureMax(ref eyes.heads);                // Eyes - Bone_Rotation                eyes.BuildEyeTemplate(Eyes.EyeTemplates.Bone_Rotation);                eyes.eyes[0].expData.controllerVars[0].bone = Eyes.FindTransform(eyes.characterRoot, eyeL);                eyes.eyes[0].expData.name = "eyeL";                eyes.eyes[0].expData.components[0].name = "eyeL";                eyes.eyes[1].expData.controllerVars[0].bone = Eyes.FindTransform(eyes.characterRoot, eyeR);                eyes.eyes[1].expData.name = "eyeR";                eyes.eyes[1].expData.components[0].name = "eyeR";                eyes.CaptureMin(ref eyes.eyes);                eyes.CaptureMax(ref eyes.eyes);                // Eyelids - Bone_Rotation                eyes.BuildEyelidTemplate(Eyes.EyelidTemplates.BlendShapes, Eyes.EyelidSelection.Upper); // includes left/right eyelid                float blinkMax = 1f;                // Left eyelid                eyes.blinklids[0].expData.controllerVars[0].smr = Eyes.FindTransform(eyes.characterRoot,  blinkSmr).GetComponent<SkinnedMeshRenderer>();                eyes.blinklids[0].expData.controllerVars[0].blendIndex = Eyes.FindBlendIndex(eyes.blinklids[0].expData.controllerVars[0].smr, blinkL);                eyes.blinklids[0].expData.controllerVars[0].maxShape = blinkMax;                eyes.blinklids[0].expData.name = "eyelidL";                // Right eyelid                eyes.blinklids[1].expData.controllerVars[0].smr = eyes.blinklids[0].expData.controllerVars[0].smr;                eyes.blinklids[1].expData.controllerVars[0].blendIndex = Eyes.FindBlendIndex(eyes.blinklids[0].expData.controllerVars[0].smr, blinkR);                eyes.blinklids[1].expData.controllerVars[0].maxShape = blinkMax;                eyes.blinklids[1].expData.name = "eyelidR";                // Track lids                eyes.CopyBlinkToTrack();                if (eyes.tracklids.Count > 1)                {	                eyes.tracklids[0].referenceIdx = 0; // left eye	                eyes.tracklids[1].referenceIdx = 1; // right eye                }                if (eyes.tracklids.Count > 2)                {	                eyes.tracklids[2].referenceIdx = 0; // left eye	                eyes.tracklids[3].referenceIdx = 1; // right eye                }                // Initialize the Eyes module                eyes.Initialize();			}		}	}}
