using UnityEngine;namespace CrazyMinnow.SALSA.OneClicks{	/// <summary>	/// RELEASE NOTES:	///		Script generated by CreateCustomOneClick: v2.7.3.	///		See CreateCustomOneClick for version details.	/// ==========================================================================	/// PURPOSE: This script applies OneClick settings to a custom model system	///		for SALSA and/or EmoteR. This script was generated by CreateCustomOneClick	///		from a custom model and is not supported by Crazy Minnow Studio, LLC.	///		unless made available via the Official downloads portal.	/// ==========================================================================	/// DISCLAIMER: While every attempt has been made to ensure the safe content	///		and operation of these files, they are provided as-is, without	///		warranty or guarantee of any kind. By downloading and using these	///		files you are accepting any and all risks associated and release	///		Crazy Minnow Studio, LLC of any and all liability.	/// ==========================================================================	/// </summary>	public class OneClickActorCore_Business_M_0054 : OneClickBase	{		public static void Setup(GameObject gameObject)		{			////////////////////////////////////////////////////////////////////////////////////////////////////////////			//	SETUP Requirements:			//		use NewExpression("expression name") to start a new viseme/emote expression.			//		use AddShapeComponent to add blendshape configurations, passing:			//			- string array of shape names to look for.			//			  : string array can be a single element.			//			  : string array can be a single regex search string.			//			    note: useRegex option must be set true.			//			- optional string name prefix for the component.			//			- optional blend amount (default = 1.0f).			//			- optional regex search option (default = false).			Init();			#region SALSA-Configuration			NewConfiguration(OneClickConfiguration.ConfigType.Salsa);			{				////////////////////////////////////////////////////////				// SMR regex searches (enable/disable/add as required).				AddSmrSearch("^Character$");				AddSmrSearch("^CC_Base_Body$");				AddSmrSearch("^CC_Base_Tongue$");				////////////////////////////////////////////////////////				// Adjust SALSA settings to taste...				// - data analysis settings				autoAdjustAnalysis = true;				autoAdjustMicrophone = false;				audioUpdateDelay = 0.098375f;				// - advanced dynamics settings				loCutoff = 0.015f;				hiCutoff = 0.75f;				useAdvDyn = true;				advDynPrimaryBias = 0.5f;				useAdvDynJitter = false;				advDynJitterAmount = 0.1f;				advDynJitterProb = 0.2f;				advDynSecondaryMix = 0f;				emphasizerTrigger = 0f;				////////////////////////////////////////////////////////				// Viseme setup...				NewExpression("w");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(-0.0131411f, 0.02459309f, -5.40167E-08f),					new Quaternion(-5.337222E-05f, 4.352721E-05f, -0.7251529f, 0.6885879f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Tight_O"}, 0.11f, 0f, 0.06f, "V_Tight_O", 1f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_L"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_L", 0.3f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_R"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_R", 0.3f, true);				AddShapeComponent(new []{"Mouth_Pucker"}, 0.11f, 0f, 0.06f, "Mouth_Pucker", 0.8f, true);				NewExpression("f");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(-0.01310437f, 0.0245931f, -5.40167E-08f),					new Quaternion(-5.354031E-05f, 4.271276E-05f, -0.7156727f, 0.6984358f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Dental_Lip"}, 0.11f, 0f, 0.06f, "V_Dental_Lip", 1f, true);				AddShapeComponent(new []{"Jaw_Open"}, 0.11f, 0f, 0.06f, "Jaw_Open", 0.08f, true);				AddShapeComponent(new []{"Tongue_Bulge_R"}, 0.11f, 0f, 0.06f, "Tongue_Bulge_R", 0.2f, true);				AddShapeComponent(new []{"Mouth_Close"}, 0.11f, 0f, 0.06f, "Mouth_Close", 0.08f, true);				NewExpression("t");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(-0.01314713f, 0.02459348f, -5.40167E-08f),					new Quaternion(-5.349794E-05f, 4.347133E-05f, -0.7200381f, 0.6939346f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Tight_O"}, 0.11f, 0f, 0.06f, "V_Tight_O", 0.31f, true);				AddShapeComponent(new []{"Mouth_Smile_L"}, 0.11f, 0f, 0.06f, "Mouth_Smile_L", 0.33f, true);				AddShapeComponent(new []{"Mouth_Smile_R"}, 0.11f, 0f, 0.06f, "Mouth_Smile_R", 0.33f, true);				NewExpression("th");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(-0.01315171f, 0.02459354f, -5.40167E-08f),					new Quaternion(-5.25638E-05f, 4.418004E-05f, -0.7285329f, 0.6850108f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"Mouth_Dimple_L"}, 0.11f, 0f, 0.06f, "Mouth_Dimple_L", 0.18f, true);				AddShapeComponent(new []{"Mouth_Dimple_R"}, 0.11f, 0f, 0.06f, "Mouth_Dimple_R", 0.18f, true);				AddShapeComponent(new []{"Mouth_Up_Upper_L"}, 0.11f, 0f, 0.06f, "Mouth_Up_Upper_L", 0.15f, true);				AddShapeComponent(new []{"Mouth_Up_Upper_R"}, 0.11f, 0f, 0.06f, "Mouth_Up_Upper_R", 0.15f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_L"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_L", 0.45f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_R"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_R", 0.45f, true);				AddShapeComponent(new []{"Mouth_Up"}, 0.11f, 0f, 0.06f, "Mouth_Up", 1f, true);				NewExpression("ow");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(-0.01313348f, 0.02459386f, -5.40167E-08f),					new Quaternion(-5.158408E-05f, 4.66164E-05f, -0.7473302f, 0.6644528f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Tight_O"}, 0.11f, 0f, 0.06f, "V_Tight_O", 0.6f, true);				AddShapeComponent(new []{"V_Lip_Open"}, 0.11f, 0f, 0.06f, "V_Lip_Open", 0.4f, true);				AddShapeComponent(new []{"Mouth_Up_Upper_L"}, 0.11f, 0f, 0.06f, "Mouth_Up_Upper_L", 0.15f, true);				AddShapeComponent(new []{"Mouth_Up_Upper_R"}, 0.11f, 0f, 0.06f, "Mouth_Up_Upper_R", 0.15f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_L"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_L", 0.5f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_R"}, 0.11f, 0f, 0.06f, "Mouth_Down_Lower_R", 0.5f, true);				NewExpression("ee");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(-0.01311946f, 0.02459376f, -5.40167E-08f),					new Quaternion(-5.059129E-05f, 4.721246E-05f, -0.7543083f, 0.6565204f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Dental_Lip"}, 0.11f, 0f, 0.06f, "V_Dental_Lip", 0.57f, true);				AddShapeComponent(new []{"V_Wide"}, 0.11f, 0f, 0.06f, "V_Wide", 0.9f, true);				AddShapeComponent(new []{"Mouth_Dimple_L"}, 0.11f, 0f, 0.06f, "Mouth_Dimple_L", 0.33f, true);				AddShapeComponent(new []{"Mouth_Dimple_R"}, 0.11f, 0f, 0.06f, "Mouth_Dimple_R", 0.33f, true);				AddShapeComponent(new []{"Mouth_Smile_L"}, 0.11f, 0f, 0.06f, "Mouth_Smile_L", 0.33f, true);				AddShapeComponent(new []{"Mouth_Smile_R"}, 0.11f, 0f, 0.06f, "Mouth_Smile_R", 0.33f, true);				NewExpression("oo");				AddBoneComponent("^CC_Base_JawRoot$",					new TformBase(new Vector3(-0.01311223f, 0.02459355f, -5.40167E-08f),					new Quaternion(-4.927812E-05f, 4.870815E-05f, -0.7695906f, 0.6385378f),					new Vector3(1f, 1f, 1f)),					0.11f, 0f, 0.06f,					"CC_Base_JawRoot",					false, true, true);				AddShapeComponent(new []{"V_Lip_Open"}, 0.11f, 0f, 0.06f, "V_Lip_Open", 0.3342f, true);				AddShapeComponent(new []{"V_Affricate"}, 0.11f, 0f, 0.06f, "V_Affricate", 0.552f, true);				AddShapeComponent(new []{"Tongue_Down"}, 0.11f, 0f, 0.06f, "Tongue_Down", 0.79f, true);				AddShapeComponent(new []{"V_Wide"}, 0.11f, 0f, 0.06f, "V_Wide", 0.552f, true);			}			#endregion // SALSA-configuration			#region EmoteR-Configuration			NewConfiguration(OneClickConfiguration.ConfigType.Emoter);			{				////////////////////////////////////////////////////////				// SMR regex searches (enable/disable/add as required).				AddSmrSearch("^Character$");				useRandomEmotes = false;				isChancePerEmote = true;				numRandomEmotesPerCycle = 0;				randomEmoteMinTimer = 1f;				randomEmoteMaxTimer = 2f;				randomChance = 0.5f;				useRandomFrac = true;				randomFracBias = 0.5f;				useRandomHoldDuration = false;				randomHoldDurationMin = 0.1f;				randomHoldDurationMax = 0.5f;				////////////////////////////////////////////////////////				// Emote setup...				NewExpression("exaspr");				AddEmoteFlags(false, true, false, 1f,false, false, 0f, EmoteRepeater.StartDelay.Immediately);				AddShapeComponent(new []{"Cheek_Puff_L"}, 0.5f, 0.5f, 0.5f, "Cheek_Puff_L", 0.3f, true);				AddShapeComponent(new []{"Cheek_Puff_R"}, 0.5f, 0.5f, 0.5f, "Cheek_Puff_R", 0.3f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_L"}, 0.5f, 0.5f, 0.5f, "Brow_Raise_Inner_L", 0.3f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_R"}, 0.5f, 0.5f, 0.5f, "Brow_Raise_Inner_R", 0.3f, true);				NewExpression("soften");				AddEmoteFlags(false, true, false, 1f,false, false, 0f, EmoteRepeater.StartDelay.Immediately);				AddShapeComponent(new []{"Mouth_Smile_L"}, 0.5f, 0.5f, 0.5f, "Mouth_Smile_L", 0.3f, true);				AddShapeComponent(new []{"Mouth_Smile_R"}, 0.5f, 0.5f, 0.5f, "Mouth_Smile_R", 0.3f, true);				AddShapeComponent(new []{"Eye_Squint_L"}, 0.5f, 0.5f, 0.5f, "Eye_Squint_L", 0.3f, true);				AddShapeComponent(new []{"Eye_Squint_R"}, 0.5f, 0.5f, 0.5f, "Eye_Squint_R", 0.3f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_L"}, 0.5f, 0.5f, 0.5f, "Brow_Raise_Inner_L", 0.3f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_R"}, 0.5f, 0.5f, 0.5f, "Brow_Raise_Inner_R", 0.3f, true);				NewExpression("BrowsUp");				AddEmoteFlags(false, true, false, 1f,false, false, 0f, EmoteRepeater.StartDelay.Immediately);				AddShapeComponent(new []{"Brow_Raise_Inner_L"}, 0.5f, 0.5f, 0.5f, "Brow_Raise_Inner_L", 0.3f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_R"}, 0.5f, 0.5f, 0.5f, "Brow_Raise_Inner_R", 0.3f, true);				AddShapeComponent(new []{"Brow_Raise_Outer_L"}, 0.5f, 0.5f, 0.5f, "Brow_Raise_Outer_L", 0.3f, true);				AddShapeComponent(new []{"Brow_Raise_Outer_R"}, 0.5f, 0.5f, 0.5f, "Brow_Raise_Outer_R", 0.3f, true);				NewExpression("squint");				AddEmoteFlags(false, true, false, 1f,false, false, 0f, EmoteRepeater.StartDelay.Immediately);				AddShapeComponent(new []{"Brow_Raise_Inner_L"}, 0.5f, 0.5f, 0.5f, "Brow_Raise_Inner_L", 0.3f, true);				AddShapeComponent(new []{"Brow_Raise_Inner_R"}, 0.5f, 0.5f, 0.5f, "Brow_Raise_Inner_R", 0.3f, true);				AddShapeComponent(new []{"Brow_Drop_L"}, 0.5f, 0.5f, 0.5f, "Brow_Drop_L", 0.3f, true);				AddShapeComponent(new []{"Brow_Drop_R"}, 0.5f, 0.5f, 0.5f, "Brow_Drop_R", 0.3f, true);				AddShapeComponent(new []{"Eye_Squint_L"}, 0.5f, 0.5f, 0.5f, "Eye_Squint_L", 0.5f, true);				AddShapeComponent(new []{"Eye_Squint_R"}, 0.5f, 0.5f, 0.5f, "Eye_Squint_R", 0.5f, true);				NewExpression("focus");				AddEmoteFlags(false, true, false, 1f,false, false, 0f, EmoteRepeater.StartDelay.Immediately);				AddShapeComponent(new []{"Cheek_Raise_L"}, 0.5f, 0.5f, 0.5f, "Cheek_Raise_L", 0.3f, true);				AddShapeComponent(new []{"Cheek_Raise_R"}, 0.5f, 0.5f, 0.5f, "Cheek_Raise_R", 0.3f, true);				AddShapeComponent(new []{"Eye_Squint_L"}, 0.5f, 0.5f, 0.5f, "Eye_Squint_L", 0.3f, true);				AddShapeComponent(new []{"Eye_Squint_R"}, 0.5f, 0.5f, 0.5f, "Eye_Squint_R", 0.3f, true);				NewExpression("flare");				AddEmoteFlags(false, true, false, 1f,false, false, 0f, EmoteRepeater.StartDelay.Immediately);				AddShapeComponent(new []{"Nose_Sneer_L"}, 0.5f, 0.5f, 0.5f, "Nose_Sneer_L", 0.4f, true);				AddShapeComponent(new []{"Nose_Sneer_R"}, 0.5f, 0.5f, 0.5f, "Nose_Sneer_R", 0.4f, true);				AddShapeComponent(new []{"Brow_Drop_L"}, 0.5f, 0.5f, 0.5f, "Brow_Drop_L", 0.4f, true);				AddShapeComponent(new []{"Brow_Drop_R"}, 0.5f, 0.5f, 0.5f, "Brow_Drop_R", 0.4f, true);				AddShapeComponent(new []{"Mouth_Down_Lower_L"}, 0.5f, 0.5f, 0.5f, "Mouth_Down_Lower_L", 0.4f, true);			}			#endregion // EmoteR-configuration			DoOneClickiness(gameObject);			if (selectedObject.GetComponent<SalsaAdvancedDynamicsSilenceAnalyzer>() == null)				selectedObject.AddComponent<SalsaAdvancedDynamicsSilenceAnalyzer>();			//Darrin's Tweaks			salsa.useTimingsOverride = true;			salsa.globalDurON = 0.125f;			salsa.globalDurOffBalance = -0.18f;			salsa.globalNuanceBalance = -0.213f;			emoter.NumRandomEmphasizersPerCycle = 1;			EmoteExpression emote;			emote = emoter.FindEmote("exaspr");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("soften");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("BrowsUp");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("squint");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("focus");			if (emote != null)				emote.frac = 1f;			emote = emoter.FindEmote("flare");			if (emote != null)				emote.frac = 1f;			var silenceAnalyzer = selectedObject.GetComponent<SalsaAdvancedDynamicsSilenceAnalyzer>();			if (silenceAnalyzer)			{				silenceAnalyzer.silenceThreshold = 0.6f;				silenceAnalyzer.timingStartPoint = 0.4f;				silenceAnalyzer.timingEndVariance = 0.97f;				silenceAnalyzer.silenceSampleWeight = 0.95f;				silenceAnalyzer.bufferSize = 512;			}		}	}}
